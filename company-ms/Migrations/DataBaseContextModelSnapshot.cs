// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MsCompany.Core.Model;

namespace MsCompany.Core.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MsCompany.Core.Model.Companies", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessName");

                    b.Property<string>("CellPhone");

                    b.Property<string>("CnpjCpf");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Email");

                    b.Property<string>("FictitiousName");

                    b.Property<string>("Image");

                    b.Property<string>("MEI");

                    b.Property<string>("Phone");

                    b.Property<string>("SerieNfce");

                    b.Property<int>("Status");

                    b.Property<string>("Time");

                    b.Property<string>("TokenNfce");

                    b.HasKey("CompanyId");

                    b.HasIndex("CnpjCpf")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MsCompany.Core.Model.CompanyAddress", b =>
                {
                    b.Property<int>("CompanyAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CompanyType");

                    b.Property<string>("Complement");

                    b.Property<string>("CountryCode");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Neighborhood");

                    b.Property<string>("Number");

                    b.Property<string>("Observation");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("CompanyAddressId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyAddress");
                });

            modelBuilder.Entity("MsCompany.Core.Model.CompanyParams", b =>
                {
                    b.Property<int>("CompanyParamsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Name");

                    b.Property<string>("NameIntegration");

                    b.Property<bool>("Type");

                    b.Property<string>("Value");

                    b.HasKey("CompanyParamsId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyParams");
                });

            modelBuilder.Entity("MsCompany.Core.Model.CompanyAddress", b =>
                {
                    b.HasOne("MsCompany.Core.Model.Companies")
                        .WithMany("CompanyAddress")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MsCompany.Core.Model.CompanyParams", b =>
                {
                    b.HasOne("MsCompany.Core.Model.Companies")
                        .WithMany("CompanyParams")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
