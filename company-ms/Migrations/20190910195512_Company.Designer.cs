// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ms.Companies.Core.Model;

namespace MsCompany.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20190910195512_Company")]
    partial class Company
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MsCompany.Model.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessName");

                    b.Property<string>("CellPhone");

                    b.Property<string>("CnpjCpf");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("FictitiousName");

                    b.Property<string>("Image");

                    b.Property<string>("MEI");

                    b.Property<int>("OwnerId");

                    b.Property<string>("Phone");

                    b.Property<string>("SerieNFCE");

                    b.Property<int>("Status");

                    b.Property<string>("Time");

                    b.Property<string>("TokenNFCE");

                    b.Property<string>("Twitter");

                    b.Property<string>("WebSite");

                    b.Property<int>("ZAccount_balance");

                    b.Property<string>("ZBirthdate");

                    b.Property<string>("ZBusiness_opening_date");

                    b.Property<int>("ZCurrent_balance");

                    b.Property<string>("ZDefault_credit");

                    b.Property<string>("ZDefault_debit");

                    b.Property<bool>("ZDelinquent");

                    b.Property<string>("ZDescription");

                    b.Property<string>("ZEin");

                    b.Property<string>("ZEmail");

                    b.Property<string>("ZFirstName");

                    b.Property<string>("ZFiscal_responsibility");

                    b.Property<string>("ZId");

                    b.Property<string>("ZLastName");

                    b.Property<string>("ZMcc");

                    b.Property<string>("ZMetadata");

                    b.Property<string>("ZPhoneNumber");

                    b.Property<string>("ZResource");

                    b.Property<string>("ZStatement_descriptor");

                    b.Property<string>("ZStatus");

                    b.Property<string>("ZTaxpayerId");

                    b.Property<string>("ZType");

                    b.HasKey("CompanyId");

                    b.HasIndex("CnpjCpf")
                        .IsUnique();

                    b.ToTable("Company");
                });

            modelBuilder.Entity("MsCompany.Model.CompanyAddress", b =>
                {
                    b.Property<int>("CompanyAddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<int>("CompanyId");

                    b.Property<int?>("CompanyId1");

                    b.Property<int?>("CompanyId2");

                    b.Property<int>("CompanyType");

                    b.Property<string>("Complement");

                    b.Property<string>("CountryCode");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Neighborhood");

                    b.Property<string>("Number");

                    b.Property<string>("Observation");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("CompanyAddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyId1");

                    b.HasIndex("CompanyId2");

                    b.ToTable("CompanyAddress");
                });

            modelBuilder.Entity("MsCompany.Model.CompanyParams", b =>
                {
                    b.Property<int>("CompanyParamsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateDeleted");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Name");

                    b.Property<string>("NameIntegration");

                    b.Property<string>("Value");

                    b.Property<bool>("type");

                    b.HasKey("CompanyParamsId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyParams");
                });

            modelBuilder.Entity("MsCompany.Model.CompanyAddress", b =>
                {
                    b.HasOne("MsCompany.Model.Company")
                        .WithMany("ZOwner_address")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MsCompany.Model.Company")
                        .WithMany("CompanyAddress")
                        .HasForeignKey("CompanyId1");

                    b.HasOne("MsCompany.Model.Company")
                        .WithMany("ZBusiness_address")
                        .HasForeignKey("CompanyId2");
                });

            modelBuilder.Entity("MsCompany.Model.CompanyParams", b =>
                {
                    b.HasOne("MsCompany.Model.Company")
                        .WithMany("CompanyParams")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
